import { Test, TestingModule } from "@nestjs/testing"; import { MapService } from "./map.service"; import { PrismaService } from "../../prisma/prisma.service"; describe("MapService", () => { let service: MapService; let prisma: PrismaService; const mockPrismaService = { zone: { findMany: jest.fn(), findUnique: jest.fn(), count: jest.fn(), }, landPlot: { findMany: jest.fn(), findUnique: jest.fn(), count: jest.fn(), groupBy: jest.fn(), }, user: { count: jest.fn(), }, workerAssignment: { count: jest.fn(), }, }; beforeEach(async () => { const module: TestingModule = await Test.createTestingModule({ providers: [ MapService, { provide: PrismaService, useValue: mockPrismaService, }, ], }).compile(); service = module.get<MapService>(MapService); prisma = module.get<PrismaService>(PrismaService); }); afterEach(() => { jest.clearAllMocks(); }); it("should be defined", () => { expect(service).toBeDefined(); }); describe("getZoneMapData", () => { it("should return zone map data", async () => { const mockZones = [ { id: "zone-1", name: "Zone A", color: "#FF0000", address: "Address 1", coordinates: [{ lat: 10, lng: 20 }], landPlots: [ { id: "plot-1", name: "Plot A1", area: 100, status: "IN_USE", coordinates: { lat: 10.123, lng: 20.456 }, imageUrl: "image1.jpg", crops: [ { crop: { name: "Tomato" }, }, ], assignments: [ { worker: { id: "worker-1", name: "John Doe" }, }, ], _count: { crops: 1, assignments: 1, }, }, ], _count: { landPlots: 1, }, }, ]; jest.spyOn(prisma.zone, "findMany").mockResolvedValue(mockZones as any); const result = await service.getZoneMapData(); expect(prisma.zone.findMany).toHaveBeenCalled(); expect(result).toHaveLength(1); expect(result[0].id).toBe("zone-1"); expect(result[0].landPlots).toHaveLength(1); }); }); describe("getLandPlotCoordinates", () => { it("should return land plot coordinates", async () => { const mockLandPlots = [ { id: "plot-1", name: "Plot A1", area: 100, status: "IN_USE", coordinates: { lat: 10.123, lng: 20.456 }, zone: { id: "zone-1", name: "A", color: "#FF0000", }, crops: [ { crop: { name: "Tomato" }, }, ], assignments: [ { worker: { id: "worker-1", name: "John Doe" }, }, ], }, ]; jest.spyOn(prisma.landPlot, "findMany").mockResolvedValue(mockLandPlots as any); const result = await service.getLandPlotCoordinates(); expect(prisma.landPlot.findMany).toHaveBeenCalled(); expect(result).toHaveLength(1); expect(result[0].id).toBe("plot-1"); expect(result[0].currentCrop).toBe("Tomato"); expect(result[0].assignedWorker).toBe("John Doe"); }); }); describe("getLandPlotHighlight", () => { it("should return land plot highlight data", async () => { const mockLandPlot = { id: "plot-1", name: "Plot A1", area: 100, status: "IN_USE", coordinates: { lat: 10.123, lng: 20.456 }, imageUrl: "image1.jpg", soilType: "Loam", notes: "Good soil", lastSeasonCrop: "Corn", zone: { id: "zone-1", name: "A", color: "#FF0000", address: "Address 1", }, crops: [ { crop: { name: "Tomato" }, }, ], assignments: [ { id: "assignment-1", worker: { id: "worker-1", name: "John Doe", email: "john@example.com", phone: "1234567890" }, }, ], services: [ { id: "service-1", service: { name: "Watering" }, status: "PENDING", scheduledAt: new Date(), worker: { id: "worker-1", name: "John Doe" }, }, ], _count: { crops: 1, assignments: 1, services: 1, }, }; jest.spyOn(prisma.landPlot, "findUnique").mockResolvedValue(mockLandPlot as any); const result = await service.getLandPlotHighlight("plot-1"); expect(prisma.landPlot.findUnique).toHaveBeenCalled(); expect(result.id).toBe("plot-1"); expect(result.currentCrop).toBe("Tomato"); expect(result.assignedWorker).toBe("John Doe"); expect(result.activeServices).toHaveLength(1); }); it("should throw ResourceNotFoundException if land plot not found", async () => { jest.spyOn(prisma.landPlot, "findUnique").mockResolvedValue(null); await expect(service.getLandPlotHighlight("plot-1")).rejects.toThrow("Land Plot with id plot-1 not found"); }); }); describe("getMapOverview", () => { it("should return map overview data", async () => { jest.spyOn(prisma.zone, "count").mockResolvedValue(3); jest.spyOn(prisma.landPlot, "count").mockResolvedValue(10); jest.spyOn(prisma.user, "count").mockResolvedValue(5); jest.spyOn(prisma.landPlot, "groupBy").mockResolvedValue([ { status: "IN_USE", _count: { id: 5 } }, { status: "EMPTY", _count: { id: 3 } }, { status: "RENOVATING", _count: { id: 2 } }, ] as any); jest.spyOn(prisma.workerAssignment, "count").mockResolvedValue(8); const result = await service.getMapOverview(); expect(result.summary.totalZones).toBe(3); expect(result.summary.totalLandPlots).toBe(10); expect(result.summary.totalWorkers).toBe(5); expect(result.summary.activeAssignments).toBe(8); expect(result.landPlotStatuses).toHaveLength(3); }); }); describe("getZoneDetails", () => { it("should return zone details", async () => { const mockZone = { id: "zone-1", name: "Zone A", color: "#FF0000", address: "Address 1", coordinates: [{ lat: 10, lng: 20 }], landPlots: [ { id: "plot-1", name: "Plot A1", area: 100, status: "IN_USE", coordinates: { lat: 10.123, lng: 20.456 }, crops: [ { crop: { name: "Tomato" }, }, ], assignments: [ { worker: { id: "worker-1", name: "John Doe" }, }, ], services: [ { id: "service-1", service: { name: "Watering" }, status: "PENDING", }, ], _count: { crops: 1, assignments: 1, services: 1, }, }, ], _count: { landPlots: 1, }, }; jest.spyOn(prisma.zone, "findUnique").mockResolvedValue(mockZone as any); const result = await service.getZoneDetails("zone-1"); expect(prisma.zone.findUnique).toHaveBeenCalled(); expect(result.id).toBe("zone-1"); expect(result.landPlots).toHaveLength(1); expect(result.totalPlots).toBe(1); }); it("should throw ResourceNotFoundException if zone not found", async () => { jest.spyOn(prisma.zone, "findUnique").mockResolvedValue(null); await expect(service.getZoneDetails("zone-1")).rejects.toThrow("Zone with id zone-1 not found"); }); }); });
