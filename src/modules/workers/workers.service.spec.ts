import { Test, TestingModule } from "@nestjs/testing"; import { WorkersService } from "./workers.service"; import { PrismaService } from "../../prisma/prisma.service"; import { UpdateWorkerDto } from "./dto/worker.dto"; import { User, Role, UserStatus } from "@prisma/client"; import { ResourceNotFoundException } from "../../common/exceptions/custom.exception"; describe("WorkersService", () => { let service: WorkersService; let prisma: PrismaService; const mockPrismaService = { user: { findMany: jest.fn(), findUnique: jest.fn(), update: jest.fn(), count: jest.fn(), }, }; beforeEach(async () => { const module: TestingModule = await Test.createTestingModule({ providers: [ WorkersService, { provide: PrismaService, useValue: mockPrismaService, }, ], }).compile(); service = module.get<WorkersService>(WorkersService); prisma = module.get<PrismaService>(PrismaService); }); afterEach(() => { jest.clearAllMocks(); }); it("should be defined", () => { expect(service).toBeDefined(); }); describe("findAll", () => { it("should return all workers", async () => { const mockWorkers: User[] = [ { id: "worker-1", name: "John Doe", email: "john@example.com", phone: "1234567890", password: "hashedPassword", role: Role.WORKER, status: UserStatus.WORKING, expertise: ["farming"] as any, createdAt: new Date(), updatedAt: new Date(), deletedAt: null, }, ]; jest.spyOn(prisma.user, "findMany").mockResolvedValue(mockWorkers); jest.spyOn(prisma.user, "count").mockResolvedValue(1); const result = await service.findAll({}, {}); expect(prisma.user.findMany).toHaveBeenCalled(); expect(result.data).toEqual(mockWorkers); expect(result.meta.total).toBe(1); }); }); describe("findOne", () => { it("should return a worker by id", async () => { const mockWorker: User = { id: "worker-1", name: "John Doe", email: "john@example.com", phone: "1234567890", password: "hashedPassword", role: Role.WORKER, status: UserStatus.WORKING, expertise: ["farming"] as any, createdAt: new Date(), updatedAt: new Date(), deletedAt: null, }; jest.spyOn(prisma.user, "findUnique").mockResolvedValue(mockWorker); const result = await service.findOne("worker-1"); expect(prisma.user.findUnique).toHaveBeenCalled(); expect(result).toEqual(mockWorker); }); it("should throw ResourceNotFoundException if worker not found", async () => { mockPrismaService.user.findUnique.mockResolvedValue(null); await expect(service.findOne("worker-1")).rejects.toThrow( ResourceNotFoundException, ); }); }); describe("update", () => { it("should update a worker", async () => { const updateWorkerDto: UpdateWorkerDto = { name: "Updated Name", phone: "9876543210", }; const mockWorker: User = { id: "worker-1", name: "Updated Name", email: "john@example.com", phone: "9876543210", password: "hashedPassword", role: Role.WORKER, status: UserStatus.WORKING, expertise: ["farming"] as any, createdAt: new Date(), updatedAt: new Date(), deletedAt: null, }; jest.spyOn(prisma.user, "findUnique").mockResolvedValue(mockWorker); jest.spyOn(prisma.user, "update").mockResolvedValue(mockWorker); const result = await service.update("worker-1", updateWorkerDto); expect(prisma.user.update).toHaveBeenCalled(); expect(result).toEqual(mockWorker); }); }); describe("remove", () => { it("should soft delete a worker", async () => { const mockWorker: User = { id: "worker-1", name: "John Doe", email: "john@example.com", phone: "1234567890", password: "hashedPassword", role: Role.WORKER, status: UserStatus.WORKING, expertise: ["farming"] as any, createdAt: new Date(), updatedAt: new Date(), deletedAt: null, }; const mockWorkerWithCounts = { ...mockWorker, _count: { assignments: 0, schedules: 0, }, }; jest.spyOn(prisma.user, "findUnique").mockResolvedValue(mockWorkerWithCounts as any); jest.spyOn(prisma.user, "update").mockResolvedValue(mockWorker); const result = await service.remove("worker-1"); expect(prisma.user.update).toHaveBeenCalled(); expect(result).toEqual(mockWorker); }); }); describe("getWorkerAssignments", () => { it("should return assignments for a specific worker", async () => { const mockWorker = { id: "worker-1", name: "John Doe", email: "john@example.com", status: UserStatus.WORKING, assignments: [ { id: "assignment-1", title: "Assignment 1", status: "IN_PROGRESS", }, ], }; jest.spyOn(prisma.user, "findUnique").mockResolvedValue(mockWorker as any); const result = await service.getWorkerAssignments("worker-1"); expect(prisma.user.findUnique).toHaveBeenCalled(); expect(result).toEqual({ worker: { id: mockWorker.id, name: mockWorker.name, email: mockWorker.email, status: mockWorker.status, }, assignments: mockWorker.assignments, }); }); }); });
